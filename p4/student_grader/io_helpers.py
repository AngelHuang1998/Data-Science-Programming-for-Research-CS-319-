"""
Used to print out messages, get feedback, and perform authentication
necessary for getting feedback.
"""

from typing import List, Optional
from logging import warning
import datetime
import getpass
import requests
from grader_utils import (
    LLM_FEEDBACK_SECTION_HEADER,
    GET_LLM_FEEDBACK_FAILED_MSG,
    RequiredRequestFields,
    GPT_SERVICE_PUBLIC_URL,
    formatted_print,
)

# The issued JWT from the server
_issued_token: Optional[str] = None

# When the token was issued
_issued_time: Optional[datetime.datetime] = None

# How long until the token will expire, this should match
# server.student_auth.issue_jwt
_TOKEN_DURATION = datetime.timedelta(hours=5)


def print_feedback_student(
    warnings_arr: List[str],
    errors_arr: List[str],
    student_code: str,
    project_id: str,
    q_id: str,
    should_get_llm_feedback: bool,
) -> None:
    """Function for printing errors and warnings below grader.check cells

    Grader's interface for getting feedback from the LLM and
    printing out the results. This implementation is different from
    get_llm_feedback_master since it assumes the correct code is not
    provided as an argument.

    Parameters:
        warnings_arr: A list of warning messages
        errors_arr: A list of error messages
        student_code: Code written by the student for the current question
        should_get_llm_feedback: Should the function get feedback generated by the LLM
    """

    if warnings_arr:
        formatted_print(warnings_arr, "Warnings:")
    if errors_arr:
        formatted_print(errors_arr, "Errors:")
    if should_get_llm_feedback:
        grader_output_list = warnings_arr + errors_arr
        llm_output = _get_llm_feedback_student(
            grader_output_list, student_code, project_id, q_id
        )
        formatted_print([llm_output], LLM_FEEDBACK_SECTION_HEADER)


def _get_llm_feedback_student(
    grader_output: List[str], student_code: str, project_id: str, q_id: str
) -> str:
    """Student version of the get_llm_feedback function

    Sends a request to our server feedback service to get feedback on a student's code.
    This function takes the autograder output, student's code, assignment ID, and question ID,
    formats them into a payload, and sends a POST request to the server's URL. If the request
    is successful, it returns the response from the server. Otherwise, it returns an error message.

    Args:
        grader_output: A list of strings representing the output from the
            autograder. Includes errors and warnings.
        student_code: The student's code submission as a string.
        project_id: The ID of the project, like "p3" or "p10"
        q_id: The ID of the specific question within the assignment.

    Returns:
        str: The feedback from the external feedback service if the request is successful,
            or an error message if the request fails.
    """
    global _issued_token, _issued_time

    if not _is_token_valid():
        _issued_token = _get_token()
        _issued_time = datetime.datetime.now(datetime.timezone.utc)

    payload = {
        RequiredRequestFields.PROJECT_ID.value: project_id,
        RequiredRequestFields.QUESTION_ID.value: q_id,
        RequiredRequestFields.STUDENT_CODE.value: student_code,
        RequiredRequestFields.AUTOGRADER_OUTPUT.value: grader_output,
    }
    headers = {
        "Content-Type": "application/json",
        "Authorization": _issued_token,
    }
    try:
        response = requests.post(
            GPT_SERVICE_PUBLIC_URL, json=payload, headers=headers, timeout=15
        )
        response.raise_for_status()
        return response.text
    except Exception:
        return GET_LLM_FEEDBACK_FAILED_MSG


def _is_token_valid() -> bool:
    """JWT is valid if it has been set and has not expired

    Print a warning for students so they know why they're being asked to
    log in again.
    """
    global _issued_token, _issued_time

    if _issued_token is None or _issued_time is None:
        _issued_token, _issued_time = None, None
        return False

    elif datetime.datetime.now(datetime.timezone.utc) - _issued_time > _TOKEN_DURATION:
        warning("Your access token has expired. You will need to login again.")
        _issued_token, _issued_time = None, None
        return False

    return True


_INVALID_CREDENTIALS_MSG = """Your netid/password was not correct. If you would like 
to get LLM feedback for this assignment, please try again by running this same cell."""

_LOGIN_INTERNAL_SERVER_ERR_MSG = """Couldn't login with the server. Please post on Piazza
so that we can address this issue. You will still be able to complete the assignment, but
without using the llm feedback feature."""


def _get_token() -> str:
    login_url = GPT_SERVICE_PUBLIC_URL + "login"

    student_netid = getpass.getpass("Enter your netid (ex: kgwilson2) and hit enter: ")
    student_password = getpass.getpass("Enter your password and hit enter: ")

    payload = {"netid": student_netid, "password": student_password}
    try:
        response = requests.post(login_url, json=payload, timeout=10)
    except Exception:
        raise ConnectionError(_LOGIN_INTERNAL_SERVER_ERR_MSG)
    if response.status_code == 401:
        raise ValueError(_INVALID_CREDENTIALS_MSG)
    elif response.status_code != 200:
        raise ConnectionError(_LOGIN_INTERNAL_SERVER_ERR_MSG)
    return response.text
